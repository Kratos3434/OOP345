/*
Name: Keith Carlos
Section: NBB
Email: kwcarlos@myseneca.ca
Student ID: 127638211

I have done all the coding by myself and only copied the code that my professor
provided to complete my workshops and assignments.
*/


Upon completing this workshop, I have learned what is a raw pointer and what is a smart 
pointer, and how to use a smart pointer. A raw pointer is simply a pointer that we have use throughout 
the course and that you need to manually delete it to prevent memory leak. A smart pointer can have 
two types, unique and shared. A unique pointer is what its name implies, it cannot be reassigned once it 
has been assigned a value just like a constant variable, a shared pointer on the other hand can be shared 
or it can be assigned and or reassigned. What is great about smart pointers is that it deallocates itself 
rather than manually deallocating it.  

 

The advantage that a smart pointer gives is that you do not need to manually delete it, an 
example in this workshop: 

GeneratingList<EmployeeWage> writeSmart(const GeneratingList<Employee>& emp, const GeneratingList<Salary>& sal) { 

	  GeneratingList<EmployeeWage> activeEmp; 

	  // TODO: Add your code here to build a list of employees 

	  //         using smart pointers 

	  for (int i = 0; i < (int)emp.size(); i++) { 

		for (int j = 0; j < (int)sal.size(); j++) { 

		    if (emp[i].id == sal[j].id) { 

			  std::shared_ptr<EmployeeWage> empWage(new EmployeeWage(emp[i].name, sal[j].salary)); 

  

			  try { 

				empWage->rangeValidator(); 

			  } 

			  catch (std::string& errMsg) { 

				throw errMsg; 

			  } 

  

			  if (activeEmp.checkSIN(emp[i].id)) { 

				activeEmp += empWage; 

			  } 

			  else { 

				std::string errMsg = "Invalid SIN"; 

				throw errMsg; 

			  } 

		    } 

		} 

	  } 

	  return activeEmp; 

    } 

 

When you compare this code to the other one that I use raw pointer rather than smart pointer: 

GeneratingList<EmployeeWage> writeRaw(const GeneratingList<Employee>& emp, const GeneratingList<Salary>& sal) { 

	  GeneratingList<EmployeeWage> activeEmp; 

  

	  // TODO: Add your code here to build a list of employees 

	  //         using raw pointers 

	  for (int i = 0; i < (int)emp.size(); i++) { 

		for (int j = 0; j < (int)sal.size(); j++) { 

		    if (emp[i].id == sal[j].id) { 

			  EmployeeWage* empWage = new EmployeeWage(emp[i].name, sal[j].salary); 

  

			  try { 

				empWage->rangeValidator(); 

			  } 

			  catch (std::string& errMsg) { 

				delete empWage; 

				throw errMsg; 

			  } 

  

			  if (activeEmp.checkSIN(emp[i].id)) { 

				activeEmp += empWage; 

			  } 

			  else { 

				delete empWage; 

				std::string errMsg = "Invalid SIN"; 

				throw errMsg; 

			  } 

			  delete empWage; 

		    } 

		} 

	  } 

  

	  return activeEmp; 

    } 

 

As you can see, we do not have to delete when using a smart pointer. 